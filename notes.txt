
Remove
    plt.figure(1)
    plt.clf()
    plt.ion()
from Advection.py and put
    plt.show()
after plt.xlabel() (to show the plot)

The code you have at the moment assumes that you have a point at x=0 and a point at x=1 so that phi[0] = phi[nx-1]. Therefore on line 27 of Sdvectio_schemes.py you should use:

    phi[0] = phiOld[0] -0.5*c*(phiOld[1] - phiOld[nx-2])
    
rather than
    phi[0] = phiOld[0] -0.5*c*(phiOld[1] - phiOld[nx-1])

Same thing for line 38.

However your code will be much simpler if you use modulo arithmetic for periodic boundary conditions. This will be particularly helpful for semi-Lagrangian. To do this, make your arrays one element smaller and do not put a point at x=1. So instead of 
x = np.linspace (0.0, 1.0, nx+1)
do
x = np.arange(0,1,dx)

and instead of:
        for j in range (1, nx-1):
            phiNew[j] = phiOld[j] - c*(phi[j+1] - phi[j-1])
        # Apply periodic boundary conditions
        phiNew[0] = phiOld[0] - c*(phi[1] - phi[nx-2])
        phiNew[nx-1] = phiNew[0]
do
        for j in range(nx):
            phiNew[j] = phiOld[j] - c*(phi[(j+1)%nx] - phi[(j-1)%nx])

and make the same change for FTCS.

You need to be able to see the errors so consider decreasing the resolution and plot values less than zero (as these are errors). So modify the plt.ylim command in Advection.py.

You might as well do:
from Advection_schemes import *
#from Diagnostics import *
from Initial_conditions import *

as you will need everything that you import

All functions should have doc-strings describing what they do and what their inputs and outputs are.

I have given you an implementation of BTCS for advection. CNCS will be similar. I haven't commented or put in a doc-string for BTCS. You will need to do this.

